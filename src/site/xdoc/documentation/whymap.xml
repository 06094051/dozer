<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
  <properties>
    <title>about</title>
    <author email="fgarsombke@yahoo.com">Franz Garsombke</author>
  </properties>
  <head>
    <title/>
    <meta http-equiv="CACHE-CONTROL" name="CACHE-CONTROL" content="NO-CACHE"/>
    <meta http-equiv="PRAGMA" name="PRAGMA" content="NO-CACHE"/>
    <meta http-equiv="EXPIRES" content="0"/>
  </head>
  <body>
    <section name="Why Map?">
      <p>
        A mapping framework is useful in a layered architecture where you are creating layers of abstraction by
        encapsulating changes to particular data objects vs. propagating these objects to other layers (i.e.
        external service data objects, domain objects, data transfer objects, internal service data objects). A
        mapping framework is ideal for using within Mapper type classes that are responsible for mapping data from
        one data object to another.
      </p>
      <p>
        For distributed systems, a side effect is the passing of domain objects between different systems. Typically,
        you won't want internal domain objects exposed externally and won't allow for external domain objects to
        bleed into your system.
      </p>
      <p>
        Mapping between data objects has been traditionally addressed by hand coding value object assemblers (or
        converters) that copy data between the objects. Most programmers will develop some sort of custom mapping
        framework and spend countless hours and thousands of lines of code mapping to and from their different data
        object.
      </p>
      <p>
        A generic mapping framework solves these problems. Dozer is an open source mapping framework that is
        robust, generic, flexible, reusable, and configurable.
      </p>
      <p>
        Data object mapping is an important part of layered service oriented architectures. Pick and choose the
        layers you use mapping carefully. Do not go overboard as there is maintenance and performance costs
        associated with mapping data objects between layers.
      </p>
    </section>
  </body>
</document>